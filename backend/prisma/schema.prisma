// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  posts     Post[]
  gameLists GameList[]
  likes     PostLike[]   // adicionando relação com likes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  games     PostGame[]
  likes     PostLike[]   // posts podem ter vários likes
}

model PostLike {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])  // garante que um usuário só pode curtir um post uma vez
}

model Game {
  id          Int      @id @default(autoincrement())
  name        String
  platform    String?
  releaseYear Int?
  genre       String?
  posts       PostGame[]
  gameLists   GameListGame[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GameList {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  games     GameListGame[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostGame {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int

  @@unique([postId, gameId])
}

model GameListGame {
  id        Int      @id @default(autoincrement())
  gameList  GameList @relation(fields: [gameListId], references: [id])
  gameListId Int
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int

  @@unique([gameListId, gameId])
}
