// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @unique @id @default(uuid()) @db.VarChar(50)
  username  String   @unique
  email     String   @unique
  password  String
  posts     Post[]
  gameLists GameList[]
  likes     PostLike[]
  following UserFollow[] @relation("Following")
  followers UserFollow[] @relation("Followers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username])
}

model UserFollow {
  id         String @id @default(uuid())
  followerId String
  followingId String

  follower   User  @relation("Following", fields: [followerId], references: [id])
  following  User  @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  games     PostGame[]
  likes     PostLike[]  
}

model PostLike {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId String
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Game {
  id            Int      @id @default(autoincrement())
  name          String
  steamId       Int      @unique
  imagePath String
  posts         PostGame[]
  gameLists     GameListGame[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
    @@index([name])

}

model GameList {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  games     GameListGame[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostGame {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int

  @@unique([postId, gameId])
}

model GameListGame {
  id        Int      @id @default(autoincrement())
  gameList  GameList @relation(fields: [gameListId], references: [id])
  gameListId Int
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int

  @@unique([gameListId, gameId])
}
